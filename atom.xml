<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>beanBlog</title>
  <icon>https://www.gravatar.com/avatar/12630e54b9530d6f8dcc18a228ca9c6f</icon>
  <subtitle>People have dreams</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-17T16:12:42.859Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>bean</name>
    <email>1332724403@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM之类加载器与双亲委派模型</title>
    <link href="http://yoursite.com/2020/01/18/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E4%B8%8E%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/01/18/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E4%B8%8E%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/</id>
    <published>2020-01-17T16:03:28.000Z</published>
    <updated>2020-01-17T16:12:42.859Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、类与类加载器"><a href="#一、类与类加载器" class="headerlink" title="一、类与类加载器"></a>一、类与类加载器</h2><p><strong>类加载器</strong>：实现加载阶段的第一步，通过一个类的全限定名来将这个类的二进制字节流加载进jvm。<br><strong>类与类加载器</strong>：任意一个类唯一性都是由它本身和加载它的类加载器确定，两个类是否相等在它们是由同一个类加载器加载的前提下。</p><blockquote><p>jvm虚拟机中包括两种类加载器：一种是启动类加载器（Bootstrap ClassLoader），它是使用C++实现。另一种是其他所有用java实现的类加载器。<br>从java程序角度：<br>1）启动类加载器：负责加载<JAVA_HOME>\lib目录下或者被-Xbootclasspath参数所指定的路径中的类，此外要求文件名被虚拟机识别，如果不被jvm识别也无法被加载。<br>2）扩展类加载器：负责加载<JAVA_HOME>\lib\exit目录下或者被java.exit.dirs系统变量所指定的路径中的所有类库。<br>3）应用程序类加载器（系统类加载器）：它是Classloader中的getSystemClassloader()方法的返回值。负责加载用户类路径上所指定的类库，如果应用程序中没有自定义类加载器，这个就为程序中默认的类加载器。</p></blockquote><h2 id="二、双亲委派模型"><a href="#二、双亲委派模型" class="headerlink" title="二、双亲委派模型"></a>二、双亲委派模型</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://img-blog.csdnimg.cn/20191128130102244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzQxMzAyMzkz,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述" title="">                </div>                <div class="image-caption">在这里插入图片描述</div>            </figure><blockquote><p>除了顶层的启动类加载器，其余所有类加载器都有自己的父类加载器。父子关系不以继承实现，而是以组合关系来复用父类加载器。</p><p><strong>工作过程</strong>： 类加载器接到类加载请求–&gt;将请求委派给父类加载器（直到最顶层启动类加载器）–&gt;父类尝试加载，加载失败反馈给子类加载器–&gt;子类加载器尝试加载<br><strong>双亲委派模型的好处</strong>：保证java底层API的稳定，避免加载和基本类重名（Object）的自定义类导致出现多个不同的重名的类（Object），从而造成java基础行为的混乱。</p></blockquote><p><strong>双亲委派模型源码：</strong></p><blockquote><p>方法加同步锁保证线程安全，首先检查该类是否被加载过，如果没有加载则调用父类加载器的loadClass()方法，若父类加载器为空说明是启动类加载器，则调用启动类加载器。<br>如果父类加载失败会抛出ClassNotFoundException，在调用自己的findClass()方法进行加载。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//同步锁</span></span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// 首先检车这个类是不是已被加载</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果父类不为空则调用父类加载器的loadClass方法</span></span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//没有父类则默认调用启动类加载器加载</span></span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">//如果父类加载器找不到这个类则抛出ClassNotFoundException</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 父类加载器失败时调用自身的findClass方法加载</span></span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//记录</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、破坏双亲委派模型"><a href="#三、破坏双亲委派模型" class="headerlink" title="三、破坏双亲委派模型"></a>三、破坏双亲委派模型</h2><h5 id="1-第一次破坏"><a href="#1-第一次破坏" class="headerlink" title="1.第一次破坏"></a>1.第一次破坏</h5><blockquote><p>双亲委派模型出现在JDK1.2之后，而类加载器和抽象类java.lang.ClassLoader已经存在。<br>因此为了向前兼容，JDK1.2之后在ClassLoader中添加了一个新的protected方法findClass。用户把自己的类加载逻辑写在findClass方法中，而不是重写loadClass方法，从而保证自定义的类加载符合双亲委派模型。</p></blockquote><h5 id="2-第二次破坏"><a href="#2-第二次破坏" class="headerlink" title="2.第二次破坏"></a>2.第二次破坏</h5><blockquote><p><strong>模型自身有缺陷</strong>。双亲委派可以确保各个类加载器的基础类的统一，这是在用户代码调用基础类的情况下，如果出现基础类回调用户代码那就不适用了。比如涉及到SPI的场景去加载所需要的SPI代码。<br>SPI机制的介绍参考其他文章。<br>为了解决这个问题，引入了线程上下文加载器（Thread Context ClassLoader），这个类加载器就可以通过java.lang.Thread类中的setContextClassLoader()方法进行设置，如果创建线程时未设置将会从父线程中继承一个，如果全局都没有则默认就是应用程序类加载器，利用这个加载器可以完成父类加载器请求子类加载器加载的动作。</p></blockquote><h5 id="3-第三次破坏"><a href="#3-第三次破坏" class="headerlink" title="3.第三次破坏"></a>3.第三次破坏</h5><blockquote><p>由于对程序动态性追求导致，如热部署，热替换等。<br>比如模块化标准OSGi R4.2中将双亲委派的树形结构变成了更复杂的网状结构。</p></blockquote><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p>深入理解JAVA虚拟机</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、类与类加载器&quot;&gt;&lt;a href=&quot;#一、类与类加载器&quot; class=&quot;headerlink&quot; title=&quot;一、类与类加载器&quot;&gt;&lt;/a&gt;一、类与类加载器&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;类加载器&lt;/strong&gt;：实现加载阶段的第一步，通过一个类的全限定名来将这
      
    
    </summary>
    
    
    
      <category term="JVM" scheme="http://yoursite.com/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/01/16/hello-world/"/>
    <id>http://yoursite.com/2020/01/16/hello-world/</id>
    <published>2020-01-16T10:27:22.953Z</published>
    <updated>2020-01-16T17:32:11.328Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><p>tags:<br>    -a<br>    -b</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
      <category term="a" scheme="http://yoursite.com/tags/a/"/>
    
      <category term="b" scheme="http://yoursite.com/tags/b/"/>
    
  </entry>
  
</feed>
